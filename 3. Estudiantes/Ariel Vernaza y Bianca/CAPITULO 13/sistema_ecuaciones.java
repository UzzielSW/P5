/*
 * Sistema_ecuaciones.java
 *
 * Created on 28 de julio de 2005, 11:16 PM
 */

//package javaapplication1;

/**
 *
 * @author  Invitado
 */
public class Sistema_ecuaciones extends javax.swing.JDialog {
    
    /** Creates new form Sistema_ecuaciones */
    public Sistema_ecuaciones(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        num_ec = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        bcalcular = new javax.swing.JButton();
        cargar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jSeparator1 = new javax.swing.JSeparator();
        msresp = new javax.swing.JOptionPane();
        mabout = new javax.swing.JOptionPane();
        auso = new javax.swing.JOptionPane();
        titulo = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        menu = new javax.swing.JMenu();
        nuevo = new javax.swing.JMenuItem();
        salir = new javax.swing.JMenuItem();
        metodos = new javax.swing.JMenu();
        sust = new javax.swing.JMenuItem();
        pmax = new javax.swing.JMenuItem();
        pesc = new javax.swing.JMenuItem();
        ejemplos = new javax.swing.JMenu();
        eje1 = new javax.swing.JMenuItem();
        eje2 = new javax.swing.JMenuItem();
        eje3 = new javax.swing.JMenuItem();
        ayuda = new javax.swing.JMenu();
        uso = new javax.swing.JMenuItem();
        about = new javax.swing.JMenuItem();

        getContentPane().setLayout(null);

        setTitle("Resolucion de Ecuaciones Lineales ");
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jPanel1.setLayout(null);

        jPanel1.setBorder(new javax.swing.border.TitledBorder(null, "Ecuaciones", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 3, 14)));
        tabla.setBorder(new javax.swing.border.EtchedBorder());
        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tabla.setRowSelectionAllowed(false);
        jScrollPane2.setViewportView(tabla);

        jPanel1.add(jScrollPane2);
        jScrollPane2.setBounds(10, 60, 380, 150);

        jLabel1.setText("Introduzca el N\u00famero de Ecuaciones:");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(10, 20, 220, 20);

        num_ec.setEnabled(false);
        num_ec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                num_ecActionPerformed(evt);
            }
        });
        num_ec.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                num_ecKeyPressed(evt);
            }
        });

        jPanel1.add(num_ec);
        num_ec.setBounds(230, 20, 50, 20);

        jLabel2.setText("(m\u00e1ximo 5)");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(60, 40, 100, 14);

        bcalcular.setText("Calcular");
        bcalcular.setEnabled(false);
        bcalcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bcalcularActionPerformed(evt);
            }
        });

        jPanel1.add(bcalcular);
        bcalcular.setBounds(240, 220, 100, 23);

        cargar.setText("Cargar");
        cargar.setEnabled(false);
        cargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cargarActionPerformed(evt);
            }
        });

        jPanel1.add(cargar);
        cargar.setBounds(310, 20, 80, 23);

        jTextArea1.setEditable(false);
        jTextArea1.setText("Metodo Gaussiano de Sustitucion Hacia Atras\nMetodo Gaussiano de Sustitucion Hacia Atras\nMetodo Gaussiano de Sustitucion Hacia Atras\nMetodo Gaussiano de Sustitucion Hacia Atras\nMetodo Gaussiano de Sustitucion Hacia Atras\nMetodo Gaussiano de Sustitucion Hacia Atras\nMetodo Gaussiano de Sustitucion Hacia Atras\nMetodo Gaussiano de Sustitucion Hacia Atras\nMetodo Gaussiano de Sustitucion Hacia Atras\nMetodo Gaussiano de Sustitucion Hacia Atras\nMetodo Gaussiano de Sustitucion Hacia Atras\nMetodo Gaussiano de Sustitucion Hacia Atras\nMetodo Gaussiano de Sustitucion Hacia Atras\nMetodo Gaussiano de Sustitucion Hacia Atras\nMetodo Gaussiano de Sustitucion Hacia Atras\nMetodo Gaussiano de Sustitucion Hacia Atras\nMetodo Gaussiano de Sustitucion Hacia Atras\nMetodo Gaussiano de Sustitucion Hacia Atras\nMetodo Gaussiano de Sustitucion Hacia Atras\nMetodo Gaussiano de Sustitucion Hacia Atras\nMetodo Gaussiano de Sustitucion Hacia Atras\nMetodo Gaussiano de Sustitucion Hacia Atras\nMetodo Gaussiano de Sustitucion Hacia Atras\nMetodo Gaussiano de Sustitucion Hacia Atras\nMetodo Gaussiano de Sustitucion Hacia Atras\nMetodo Gaussiano de Sustitucion Hacia Atras\nMetodo Gaussiano de Sustitucion Hacia Atras\nMetodo Gaussiano de Sustitucion Hacia Atras\nMetodo Gaussiano de Sustitucion Hacia Atras\nMetodo Gaussiano de Sustitucion Hacia Atras\nMetodo Gaussiano de Sustitucion Hacia Atras");
        jScrollPane1.setViewportView(jTextArea1);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(30, 300, 340, 170);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(10, 50, 400, 250);

        jPanel2.setLayout(null);

        jPanel2.setBorder(new javax.swing.border.TitledBorder(null, "Teoria", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 3, 14)));
        jTextArea2.setEditable(false);
        jTextArea2.setText("Hemos estudiado el m\u00e9todo m\u00e1s b\u00e1sico \ny a la ves m\u00e1s importante para la soluci\u00f3n directa \nde sistemas lineales. La soluci\u00f3n directa de\n sistemas de ecuaciones lineales conlleva \nesencialmente dos etapas: \n1.Transformaci\u00f3n del sistema original a otro \n    sistema equivalente m\u00e1s \"simple\" y luego,\n2.La soluci\u00f3n del nuevo sistema equivalente. \n   La transformaci\u00f3n del sistema original a uno m\u00e1s\n   simple toma muchas formas la m\u00e1s com\u00fan de \n   ellas siendo el proceso de Eliminaci\u00f3n Gaussiana.  \n   Dentro de estos m\u00e9todos encontraremos unos\n   mas engorrosos, con respecto a su transformaci\u00f3n\n   que otros, pero todos llevan a una misma soluci\u00f3n.\n   En lo personal el m\u00e9todo mas engorroso es el de\n   eliminaci\u00f3n gaussiana con pivoteo escalado de \n   columnas, en comparaci\u00f3n con los otros dos.\n\n");
        jScrollPane3.setViewportView(jTextArea2);

        jPanel2.add(jScrollPane3);
        jScrollPane3.setBounds(10, 20, 290, 370);

        getContentPane().add(jPanel2);
        jPanel2.setBounds(430, 0, 310, 400);

        getContentPane().add(jSeparator1);
        jSeparator1.setBounds(20, 290, 360, 0);

        getContentPane().add(msresp);
        msresp.setBounds(390, 130, 30, 10);

        getContentPane().add(mabout);
        mabout.setBounds(410, 130, 10, 10);

        getContentPane().add(auso);
        auso.setBounds(390, 170, 20, 20);

        titulo.setEditable(false);
        titulo.setFont(new java.awt.Font("Tahoma", 1, 12));
        titulo.setText(" seleccione un m\u00e9todo");
        titulo.setBackground(javax.swing.UIManager.getDefaults().getColor("Button.background"));
        titulo.setBorder(null);
        getContentPane().add(titulo);
        titulo.setBounds(0, 20, 430, 30);

        menu.setText("Menu");
        nuevo.setText("Nuevo");
        nuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoActionPerformed(evt);
            }
        });

        menu.add(nuevo);

        salir.setText("Exit");
        salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirActionPerformed(evt);
            }
        });

        menu.add(salir);

        jMenuBar1.add(menu);

        metodos.setText("M\u00e9todos");
        metodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                metodosActionPerformed(evt);
            }
        });

        sust.setText("Sustitucion Hacia atras");
        sust.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sustActionPerformed(evt);
            }
        });

        metodos.add(sust);

        pmax.setText("Pivote Maximo");
        pmax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pmaxActionPerformed(evt);
            }
        });

        metodos.add(pmax);

        pesc.setText(" Pivote Escaldo");
        pesc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pescActionPerformed(evt);
            }
        });

        metodos.add(pesc);

        jMenuBar1.add(metodos);

        ejemplos.setText("Ejemplos");
        eje1.setText("Ejemplo 1");
        eje1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eje1ActionPerformed(evt);
            }
        });

        ejemplos.add(eje1);

        eje2.setText("Ejemplo 2");
        eje2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eje2ActionPerformed(evt);
            }
        });

        ejemplos.add(eje2);

        eje3.setText("Ejemplo 3");
        eje3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eje3ActionPerformed(evt);
            }
        });

        ejemplos.add(eje3);

        jMenuBar1.add(ejemplos);

        ayuda.setText("Ayuda");
        uso.setText("uso del programa");
        uso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usoActionPerformed(evt);
            }
        });

        ayuda.add(uso);

        about.setText("About");
        about.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutActionPerformed(evt);
            }
        });

        ayuda.add(about);

        jMenuBar1.add(ayuda);

        setJMenuBar(jMenuBar1);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-763)/2, (screenSize.height-471)/2, 763, 471);
    }//GEN-END:initComponents

    private void eje3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eje3ActionPerformed
        // TODO add your handling code here:
        num_ec.setEnabled(false);
        bcalcular.setEnabled(false);
        cargar.setEnabled(false);
        N=2;
        cambio=1;
        tabla.setModel(new javax.swing.table.DefaultTableModel(new Object [N][N+1] , new String [N+1]  ));     
        Object a[][]={ {"0.003","59.14","59.17"},
                       {"5.29","-6.130","46.78"}                       
                     };        
         for(int i=0;i<N;i++)
            for(int j=0;j<(N+1);j++)
                tabla.setValueAt(a[i][j],i,j); 
         tabla.setEnabled(false);
    }//GEN-LAST:event_eje3ActionPerformed

    private void eje2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eje2ActionPerformed
        // TODO add your handling code here:
        num_ec.setEnabled(false);
        bcalcular.setEnabled(false);
        cargar.setEnabled(false);
        N=4;
        cambio=1;
        tabla.setModel(new javax.swing.table.DefaultTableModel(new Object [N][N+1] , new String [N+1]  ));     
        Object a[][]={ {"1","1","1","1","7"},
                       {"0","0","-1","1","1"},
                       {"0","0","1","-2","-4"},
                       {"0","0","0","1","3"}                        
                     };        
         for(int i=0;i<N;i++)
            for(int j=0;j<(N+1);j++)
                tabla.setValueAt(a[i][j],i,j); 
         tabla.setEnabled(false);
    }//GEN-LAST:event_eje2ActionPerformed

    private void eje1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eje1ActionPerformed
        // TODO add your handling code here:
        num_ec.setEnabled(false);
        bcalcular.setEnabled(false);
        cargar.setEnabled(false);
        N=4;
        cambio=1;
        tabla.setModel(new javax.swing.table.DefaultTableModel(new Object [N][N+1] , new String [N+1]  ));     
        Object a[][]={ {"2","-1","0","0","1"},
                       {"-1","2","-1","0","0"},
                       {"0","-1","2","-1","0"},
                       {"0","0","-1","2","1"}                        
                     };        
         for(int i=0;i<N;i++)
            for(int j=0;j<(N+1);j++)
                tabla.setValueAt(a[i][j],i,j); 
         tabla.setEnabled(false);
         //bcalcular.setEnabled(true);
    }//GEN-LAST:event_eje1ActionPerformed

    private void metodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_metodosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_metodosActionPerformed

    private void usoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usoActionPerformed
        auso.showMessageDialog(null,"\n  1. Seleccione un metodo" +
        "                              \n 2. Introduzca la cantidad de ecuaciones a evaluar" +
        "                              \n 3. Presione el Boton Cargar" +
        "                              \n 4. Cargue la matriz,la ultima columna es para los terminos libres" +
        "                              \n 5  Presione Calcular" +
        "\n\n si desea calcular otro problema selecione Menu, luego nuevo","USO",1);
    }//GEN-LAST:event_usoActionPerformed

    private void aboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutActionPerformed
    mabout.showMessageDialog(null,"Sistema de Ecuaciones\n\n    Desarrolladores:\n   Aguilar Alexander\n  Atencio Yaremis\n   Garcia Alain\n   Ramos Jahirr\n   Santos Rodolfo\n   Vallejo Andrea");       
    }//GEN-LAST:event_aboutActionPerformed

    private void salirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirActionPerformed
        System.exit(1);
    }//GEN-LAST:event_salirActionPerformed

    private void nuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoActionPerformed
        int i,j;
        String cad;
        cad = "";
        num_ec.setText("");
        cargar.setEnabled(true);
        num_ec.setEnabled(true);
        bcalcular.setEnabled(true);
        Object a[][]=new Object [N][N+1];        
         for(i=0;i<N;i++)
            for(j=0;j<(N+1);j++)
                tabla.setValueAt("",i,j);                                    
    }//GEN-LAST:event_nuevoActionPerformed

    private void cargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cargarActionPerformed
        // TODO add your handling code here:
        String cadena;
        Object cad;
        int i,j;
        cambio=0;
        cadena=num_ec.getText();
        N=new Integer(cadena).intValue();
        Object matriz[][]=new Object[N][N+1];
        tabla.setModel(new javax.swing.table.DefaultTableModel(new Object [N][N+1] , new String [N+1]  ));     
        //tabla.rowSelectionAllowed();
        cargar.setEnabled(false);
        cadena=titulo.getText();        
        
    }//GEN-LAST:event_cargarActionPerformed

    
    private void num_ecKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_num_ecKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_num_ecKeyPressed

    private void bcalcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bcalcularActionPerformed
        // TODO add your handling code here:     
        String cadena;
        cadena=titulo.getText();
        int opc=0,i,j;               
        if(cadena.compareTo("Mtodo de Eliminacin Gaussiana con Pivote Escalado de Columna")==0)
            opc=3;
        else
               if(cadena.compareTo("Mtodo Eliminacin Gaussiano con Pivoteo Mximo de Columna")==0)
                    opc=2;
               else
                    if(cadena.compareTo("Mtodo Eliminacin Gaussiano con Sustitucin Hacia Atrs")==0)
                           opc=1;
        switch(opc)
            {
                case 1:
                    {
                        int l=0,h=0;
                        System.out.println("\n\n\tPROGRAMA DE ELIMINACION GAUSSIANA CON SUSTITUCION HACIA ATRAS ");              
                        obj.num_ecuaciones=N;
                        obj.i=0;
                        for(i=0;i<N;i++)
                            for(j=0;j<(N+1);j++)
                                {
                                    cadena=tabla.getValueAt(i,j).toString();                
                                    obj.A[i][j]= new Double(cadena).doubleValue();                
                                    System.out.println("obj.A["+i+"]["+j+"]="+obj.A[i][j]);
                                }                     
                        obj=obj.algoritmo(obj);
                        obj.i=0;
                        while(obj.i<obj.num_ecuaciones)
                            {       
                                System.out.println("\n\n\tVALORES  X["+ (obj.i+1)+"]: "+obj.X[obj.i]);
                                msresp.showMessageDialog(null,"\n\n\tVALORES  X["+ (obj.i+1)+"]: "+obj.X[obj.i]);
                                ++obj.i;
                                
                            }
                        break;
                    }                
            case 2:
                {
                    int l=0,h=0;
                    System.out.println("\n\n\tPROGRAMA DE ELIMINACION GAUSSIANA CON PIVOTEO MAXIMO DE COLUMNA ");
                    System.out.println("\n\n\tINGRESE LA CANTIDAD DE ECUACIONES: ");
                    ga2.num_ecuaciones=N; 
                    ga2.i=0;
                    for(i=0;i<N;i++)
                        for(j=0;j<(N+1);j++)
                            {
                                cadena=tabla.getValueAt(i,j).toString();                
                                ga2.A[i][j]= new Double(cadena).doubleValue();                
                                System.out.println("ga2.A["+i+"]["+j+"]="+ga2.A[i][j]);
                            }
                    ga2=ga2.algoritmo(ga2);
                    ga2.i=0;
                    while(ga2.i<ga2.num_ecuaciones)
                        {       
                            System.out.println("\n\n\tVALORES  X["+ (ga2.i+1)+"]: "+ga2.X[ga2.i]);
                            msresp.showMessageDialog(null,"\n\n\tVALORES  X["+ (ga2.i+1)+"]: "+ga2.X[ga2.i]);
                            ++ga2.i;
                        }                                  
                    break;
                }//fin de main... */                
            case 3: 
                {
                     int l=0,h=0;
                    System.out.println("\n\n\tPROGRAMA DE ELIMINACION GAUSSIANA CON PIVOTEO ESCALADO DE COLUMNA ");
                    System.out.println("\n\n\tINGRESE LA CANTIDAD DE ECUACIONES: ");
                    ga3.num_ecuaciones=N;// new Integer(cadena).intValue();
                    ga3.i=0;
                    for(i=0;i<N;i++)
                        for(j=0;j<(N+1);j++)
                            {
                                cadena=tabla.getValueAt(i,j).toString();                
                                ga3.A[i][j]= new Double(cadena).doubleValue();                
                                System.out.println("ga3.A["+i+"]["+j+"]="+ga3.A[i][j]);
                            }
                    ga3=ga3.algoritmo(ga3);
                    ga3.i=0;
                    while(ga3.i<ga3.num_ecuaciones)
                        {       
                            System.out.println("\n\n\tVALORES  X["+ (ga3.i+1)+"]: "+ga3.X[ga3.i]);
                            msresp.showMessageDialog(null,"\n\n\tVALORES  X["+ (ga3.i+1)+"]: "+ga3.X[ga3.i]);
                            ++ga3.i;
                        }
                    //*******************************************
                     break;
                }
            }
        tabla.setEnabled(false);
    }//GEN-LAST:event_bcalcularActionPerformed

    private void num_ecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_num_ecActionPerformed
        // TODO add your handling code here:       
    }//GEN-LAST:event_num_ecActionPerformed

    private void pescActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pescActionPerformed
       titulo.setText("Mtodo de Eliminacin Gaussiana con Pivote Escalado de Columna");
       if(cambio==0)
        {
            num_ec.setEnabled(true);
            bcalcular.setEnabled(true);
            cargar.setEnabled(true);
        }
       else
           bcalcular.setEnabled(true);
    }//GEN-LAST:event_pescActionPerformed

    private void pmaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pmaxActionPerformed
       titulo.setText("Mtodo Eliminacin Gaussiano con Pivoteo Mximo de Columna");
       if(cambio==0)
        {
            num_ec.setEnabled(true);
            bcalcular.setEnabled(true);
            cargar.setEnabled(true);              
        }
       else
           bcalcular.setEnabled(true);
    }//GEN-LAST:event_pmaxActionPerformed

    private void sustActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sustActionPerformed
        titulo.setText("Mtodo Eliminacin Gaussiano con Sustitucin Hacia Atrs");  
        if(cambio==0)
            {
                num_ec.setEnabled(true);        
                bcalcular.setEnabled(true);
                cargar.setEnabled(true);
            }
        else
           bcalcular.setEnabled(true);
    }//GEN-LAST:event_sustActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Sistema_ecuaciones(new javax.swing.JFrame(), true).setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem about;
    private javax.swing.JOptionPane auso;
    private javax.swing.JMenu ayuda;
    private javax.swing.JButton bcalcular;
    private javax.swing.JButton cargar;
    private javax.swing.JMenuItem eje1;
    private javax.swing.JMenuItem eje2;
    private javax.swing.JMenuItem eje3;
    private javax.swing.JMenu ejemplos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JOptionPane mabout;
    private javax.swing.JMenu menu;
    private javax.swing.JMenu metodos;
    private javax.swing.JOptionPane msresp;
    private javax.swing.JMenuItem nuevo;
    private javax.swing.JTextField num_ec;
    private javax.swing.JMenuItem pesc;
    private javax.swing.JMenuItem pmax;
    private javax.swing.JMenuItem salir;
    private javax.swing.JMenuItem sust;
    private javax.swing.JTable tabla;
    private javax.swing.JTextField titulo;
    private javax.swing.JMenuItem uso;
    // End of variables declaration//GEN-END:variables
   public int N,cambio=0;
   Gaussiana obj=new Gaussiana();
   gaussiana2 ga2=new gaussiana2();   
   gaussiana3 ga3=new gaussiana3(); 
}


//import java.io.*;
class Gaussiana
            {
        //gaussiana con sustitucion hacia atras
        protected final static int MAX =10;
        double A[][]=new double [MAX][MAX];
        int P=-1;
        
        double M;
        double X[]=new double [MAX];
        int i,j;
        int num_ecuaciones;
        //int num_incog;

        public Gaussiana() 
        {

        }
     
        public Gaussiana algoritmo(Gaussiana obj)// throws IOException
        {
            int l=0,m=0;
            boolean band=true;
            int indice=0;
            String cad;
            obj.i=0;
            obj.j=0;
            while(obj.i<=obj.num_ecuaciones-1)
                     {
                        l=0;
                        while(l<=obj.num_ecuaciones-1)
                         {  
                            m=l+1;
                            while(m <=obj.num_ecuaciones-1)   
                                {                                
                                    if(Math.abs(obj.A[l][obj.i])<Math.abs(obj.A[m][obj.i]))
                                        {  
                                            indice=l;    
                                        }
                                    else
                                            indice=m;
                                    ++m;  
                                }                                
                             ++l;
                         }                        
                        obj.P=indice;
                        System.out.println("a[p][i]"+obj.A[obj.P][obj.i]);
                        if(obj.A[obj.P][obj.i]==0)
                            {               
                                System.out.println("\n\n\tNO EXISTE SOLUCION UNICA PUESTO QUE P NO SE ENCUENTRA "); 
                                break;
                            }
                        obj.j=obj.i+1;                  
                        while(obj.j<=obj.num_ecuaciones-1)
                            {                
                                obj.M=obj.A[j][obj.i]/obj.A[obj.i][obj.i];
                                obj=obj.Ej_Mji_Ei(obj);
                                ++obj.j;                
                            }   //fin de paso 4
                        ++obj.i;                                               
                    }//Paso 2-4                
                    //paso 7             
            if(obj.A[obj.num_ecuaciones-1][obj.num_ecuaciones-1]==0)
                  {
                      System.out.println("\n\n\tNO EXISTE SOLUCION UNICA  ");                                          
                  }               
            //paso 8
            obj.X[obj.num_ecuaciones-1]=obj.A[obj.num_ecuaciones-1][obj.num_ecuaciones]/obj.A[obj.num_ecuaciones-1][obj.num_ecuaciones-1];        
            //paso 9
            obj=obj.Paso_9(obj);                
            return obj;
      }//fin de algoritmo
     

 
public Gaussiana cambio_fila(Gaussiana obj) // throws IOException
      {
            double temp;
            int k=0;                                              
            while(k<=obj.num_ecuaciones)
                {
                       temp=obj.A[obj.P][k];    
                       obj.A[obj.P][k]=obj.A[obj.i][k];
                       obj.A[obj.i][k]=temp;
                       ++k;
                }                              
            return obj;
      }   


 

public Gaussiana Ej_Mji_Ei(Gaussiana obj)//  throws IOException
      {                       
           int k=0;
           k=obj.i;
           while(k<=obj.num_ecuaciones)
                  {
                       obj.A[obj.j][k]=obj.A[obj.j][k]-(obj.M*obj.A[obj.i][k]);
                      ++k; 
                  }                              
           return obj;
      }   


public Gaussiana Paso_9(Gaussiana obj)
      {                       
            obj.i=obj.num_ecuaciones-2;
            double temp=0;                                           
            while(obj.i>=0)
                {                                                 
                    obj.j=obj.i+1;     
                    while(obj.j<=obj.num_ecuaciones-1)      
                            {     
                                temp+=(obj.A[obj.i][obj.j]*obj.X[obj.j]);     
                                obj.j++;
                            }                          
                    obj.X[obj.i]=(obj.A[obj.i][obj.num_ecuaciones]-temp)/obj.A[obj.i][obj.i];
                    temp=0;
                    obj.i--;                     
                }   
            return obj;
      } 

}//fin de la clase


class gaussiana2
    {
        //gaussiana con pivoteo maximo de columnas
        protected final static int MAX =10;
        double A[][]=new double [MAX][MAX];
        int P=-1;        
        double M;
        double X[]=new double [MAX];
        int i,j;
        int num_ecuaciones;
     

        public gaussiana2() 
        {

        }
     
        public gaussiana2 algoritmo(gaussiana2 obj) //throws IOException
            {
                int l=0,m=0;
                boolean band=true;
                String cad;
                obj.i=0;
                obj.j=0;
                while(obj.i<=obj.num_ecuaciones-1)
                     {
                        l=obj.i;                
                        //PASO2                        
                        while(l<=obj.num_ecuaciones-1)
                            {  
                                 m=l+1;
                                while(m <=obj.num_ecuaciones-1)   
                                    {
                                        if(Math.abs(obj.A[l][obj.i])<Math.abs(obj.A[m][obj.i]))
                                            {  
                                                obj.P=m;   //se le asigana a obj.P el valor de la fila del mayor valor
                                                obj=obj.cambio_fila(obj);//se cambian la filas, para ordenar                         
                                            }
                                        else
                                            {   
                                                obj.P=l;
                                            }
                                        ++m;  
                                    }   
                             
                                ++l;
                             }                                               
                        if(obj.A[obj.P][obj.i]==0)
                            {               
                                System.out.println("\n\n\tNO EXISTE SOLUCION UNICA PUESTO QUE P NO SE ENCUENTRA "); 
                                break;                  
                            }   
                        //fin de paso 2                
                        //paso 4
                        obj.j=obj.i+1;                  
                        while(obj.j<=obj.num_ecuaciones-1)
                            {                
                                obj.M=obj.A[obj.j][obj.i]/obj.A[obj.i][obj.i];
                                obj=obj.Ej_Mji_Ei(obj);
                                ++obj.j;                
                            }   //fin de paso 4
                        ++obj.i;                                               
                    }//Paso 2-4            
                //paso 7             
                if(obj.A[obj.num_ecuaciones-1][obj.num_ecuaciones-1]==0)
                  {
                    System.out.println("\n\n\tNO EXISTE SOLUCION UNICA  ");                   
                  }               
                //paso 8
                obj.X[obj.num_ecuaciones-1]=obj.A[obj.num_ecuaciones-1][obj.num_ecuaciones]/obj.A[obj.num_ecuaciones-1][obj.num_ecuaciones-1];       
        //paso 9
        obj=obj.Paso_9(obj);
        return obj;
      } //fin de algoritmo
     

 
public gaussiana2 cambio_fila(gaussiana2 obj) // throws IOException
      {
           double temp=0;
           int k=0;                       
           while(k<=obj.num_ecuaciones)
              {                          
                   temp=obj.A[obj.P][k];    
                   obj.A[obj.P][k]=obj.A[obj.i][k];                       
                   obj.A[obj.i][k]=temp;
                   ++k;
              }                              
           return obj;
      }   

 

public gaussiana2 Ej_Mji_Ei(gaussiana2 obj) // throws IOException
      {                       
           int k=0;
           k=obj.i;
           while(k<=obj.num_ecuaciones)
              {
                  obj.A[obj.j][k]=obj.A[obj.j][k]-(obj.M*obj.A[obj.i][k]);
                  ++k; 
              }                              
           return obj;
      }   

public gaussiana2 Paso_9(gaussiana2 obj)
      {
            obj.i=obj.num_ecuaciones-2;
            double temp=0;                       
            while(obj.i>=0)
                  {                                                 
                        obj.j=obj.i+1;     
                        while(obj.j<=obj.num_ecuaciones-1)      
                            {     
                                temp+=(obj.A[obj.i][obj.j]*obj.X[obj.j]);     
                                obj.j++;
                            }                          
                        obj.X[obj.i]=(obj.A[obj.i][obj.num_ecuaciones]-temp)/obj.A[obj.i][obj.i];
                        temp=0;
                        obj.i--;                     
                  }   
            return obj;
      } 
}



class gaussiana3
    {
         //gaussiana con pivoteo maximo de columnas
         protected final static int MAX =10;
         double A[][]=new double [MAX][MAX];
         int P=-1;
         double mayor[]=new double[MAX];   
         double divisiones[]=new double[MAX];     
         double M;
         double X[]=new double [MAX];
         int i,j;
         int num_ecuaciones;
     
        public gaussiana3() 
        {
        }
     
        public gaussiana3 algoritmo(gaussiana3 obj) //throws IOException
        {
        int l=0,m=0;
        // boolean band=true;
        //double divisiones[]=new double[MAX];        
        String cad;
        obj.i=0;
        obj.j=0;                     
        obj=obj.Busca_mayor(obj);
        while(m <=obj.num_ecuaciones-1)   
             {  
                if(obj.mayor[m]==0)
                    {
                        System.out.println("\n\n\tNO EXISTE SOLUCION UNICA PUESTO QUE S["+m+"] NO SE ENCUENTRA ");
                        obj.i=obj.num_ecuaciones+1; 
                        break;                   
                    }
                else
                        obj.divisiones[m]=Math.abs(obj.A[m][0])/obj.mayor[m];  
                ++m;
             }
         obj=obj.Mayor_div(obj);   
         obj=obj.cambio_fila(obj);
         while(obj.i<=obj.num_ecuaciones-1)
             {   
                     //paso 4
                     obj.j=obj.i+1;                  
                     while(obj.j<=obj.num_ecuaciones-1)
                            {                
                                obj.M=obj.A[obj.j][obj.i]/obj.A[obj.i][obj.i];
                                obj=obj.Ej_Mji_Ei(obj);
                                ++obj.j;                
                            }   //fin de paso 4
                     ++obj.i;
             }//Paso 2-4            
         //paso 7             
         if(obj.A[obj.num_ecuaciones-1][obj.num_ecuaciones-1]==0)
                  {
                       System.out.println("\n\n\tNO EXISTE SOLUCION UNICA  ");                   
                  }               
         //paso 8
         obj.X[obj.num_ecuaciones-1]=obj.A[obj.num_ecuaciones-1][obj.num_ecuaciones]/obj.A[obj.num_ecuaciones-1][obj.num_ecuaciones-1];        
         //paso 9
         obj=obj.Paso_9(obj);                
        return obj;
      }//fin de algoritmo
     
        
public gaussiana3 cambio_fila(gaussiana3 obj) // throws IOException
      {
           double temp;
           int k=0;                       
           while(k<=obj.num_ecuaciones)
              {
                    temp=obj.A[obj.P][k];    
                    obj.A[obj.P][k]=obj.A[obj.i][k];
                    obj.A[obj.i][k]=temp;
                    ++k;
              }                              
           return obj;
      }   

 

public gaussiana3 Ej_Mji_Ei(gaussiana3 obj)  //throws IOException
      {                       
           int k=0;
           k=obj.i;
           while(k<=obj.num_ecuaciones)
              {
                      obj.A[obj.j][k]=obj.A[obj.j][k]-(obj.M*obj.A[obj.i][k]);
                      ++k; 
              }    
           return obj;
      }   


public gaussiana3 Busca_mayor(gaussiana3 obj)
      {
            int cont1=0,cont2=0,cont3=0;
            while(cont1<=obj.num_ecuaciones-1)
                  {    
                      cont2=0;                               
                      while(cont2<=obj.num_ecuaciones-1)
                            {
                               cont3=cont2+1;
                               while(cont3<=obj.num_ecuaciones-1)
                                        {
                                            if(Math.abs(obj.A[cont1][cont2])<Math.abs(obj.A[cont1][cont3]))
                                                {    
                                                    obj.mayor[cont1]=obj.A[cont1][cont3];
                                                    ++cont2;
                                                }
                                            else
                                                    obj.mayor[cont1]=obj.A[cont1][cont2];                       
                                            cont3++;
                                        }                       
                               cont2++;					                      
                            }                                                                               
                       cont1++;
                  }                       
            return obj;             
        } 
                       
public gaussiana3 Mayor_div(gaussiana3 obj)
      {    
            int cont2=0,cont3=0;
            while(cont2<=obj.num_ecuaciones-1)
                {
                       cont3=cont2+1;
                       while(cont3<=obj.num_ecuaciones-1)
                               {
                                    if(obj.divisiones[cont2]<obj.divisiones[cont3])
                                        obj.P=cont3;
                                    else
                                        obj.P=cont2;
                                    cont3++;
                               }	
                        cont2++;					                                                                          
                }
            return obj;
     }
                       
public gaussiana3 Paso_9(gaussiana3 obj)
      {                       
            obj.i=obj.num_ecuaciones-2;
            double temp=0;
            while(obj.i>=0)
              {                                                
                    obj.j=obj.i+1;     
                    while(obj.j<=obj.num_ecuaciones-1)      
                          {     
                            temp+=(obj.A[obj.i][obj.j]*obj.X[obj.j]);     
                            obj.j++;
                          }    
                    obj.X[obj.i]=(obj.A[obj.i][obj.num_ecuaciones]-temp)/obj.A[obj.i][obj.i];
                    temp=0;
                    obj.i--;
              }   
            return obj;
      }
}




